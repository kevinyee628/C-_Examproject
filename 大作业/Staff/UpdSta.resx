<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0
        Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8AJUW1ADRh/wAwW/IAFCRfAAAAAAAA
        AAAAAAAAAAECBwAhPaMADBc9AAAAAAAAAAAAAAAAAAYLHgAmR7oAAAAAAAAAAAAAAAAAAAAAABw0igAL
        FTgAAAECAAAAAAAAAAAABAgVABowfgAMFzwAAAAAAAAAAAAAAAAAESBWAC9X5gAlRbUAHzqZADRh/wAs
        U90AChMzAAAAAAAAAAAAAAAAABQlYwAXKm8AAwYPAAAAAAAAAAAABgobACRCsAAECBMAAAAAAAAAAAAA
        AAAAIT2hAAsTMwAAAAAAAAAAAAAAAAAHDSMAI0GqAAAAAAAAAAAAAAAAAAwWOgArUNEANGH/ABYpawAA
        AAAAJUSyADNd+AAgPJ8AAgMJAAAAAAAAAAAABQkXACNAqwAHDSIAAAAAAAAAAAAFCBYAHzmYAAgQKgAA
        AAAAAAAAAAAAAAAcNIgACRArAAAAAAAAAAAAAgMHABcqbgAMFzsAAAAAAAAAAAAGDB4AJEKvADJg/AAh
        PaEAAwUNAAAAAAAECBQALlTgADBY6wAgO54AEyReABIhVwAWJ2kAJUW4AB88nQAVJ2cAFCViABYoawAk
        Qq8AGzOFABIiWQASIVcAEyReACI/pQAVKGgAEB1NAA8cSwARH1QALFPaAA4ZQgAJDykACREtACA8mwAx
        WvAAKlDUAAgOJQAAAAAAAAAAAAAAAAAJEi4AM1/5ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0
        Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0
        Yf8ANGH/ADJc9QAOGkMAAAAAAAAAAAAAAAAAAAAAAAECBwARH1EALVTcADNf/QA0Yf8ANGH/ADRh/wA0
        Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0
        Yf8ANGH/ADRf/QAsUdYADhpEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUKGQAfOZcAMFvyABgtdgAC
        BAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAIDCAAUJmMAMVrwAB86mgAFCRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABw4kACRCsAAu
        VuEAESBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAA0ZQgAtU9sAHzqaAAUJGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH
        DiQAJEKwAC5W4QARIFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADRlCAC1T2wAfOpoABQkYAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAUKGQAfOZcAMlz1AB43kQAOGkQADRhAAA0YQAANGEAADRhAAA0YQAANGEAADRhAAA0YQAAN
        GEAADRhAAA0YQAANGEAADRhAAA0YQAANGEAADRhAAA4ZQwAbMoIAMlzzAB86mgAFCRgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAABIhVgAwXPEANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0
        Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wAyXfQAFilrAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAeUAArUNIAM176ADRh/wA0Yf8ANGH/ADRh/wA0
        Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wA0Yf8ANGH/ADRh/wAyYPwAK1PZABQlYAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4AAAD+AAAAfAAAADwjx/w8I8f8PCIH/DwiB/w8Igf8PCIH/DwiB/w8Ig
        f8PCPH/Dwjx/w8I8f8PCAH/DwgB/w8OB/8PD///DAAAAAAAAAAAcc8Y4DjHOcIYxzGCAAAABwAAAA8AA
        AAfg//8H4f//h+H//4fgAAAH8AAAD/gAAB8=
</value>
  </data>
</root>